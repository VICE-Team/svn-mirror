#!/bin/sh

#
# gensvnversion.sh - svnversion.h generator script
#
# Written by
#  Marco van den Heuvel <blackystardust68@yahoo.com>
#
# This file is part of VICE, the Versatile Commodore Emulator.
# See README for copyright notice.
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
#  02111-1307  USA.
#
# Usage: gensvnversion.sh <output-file>
#                          $1
#

# avoid script to just hang if no file name was provided
if [ "$#" -ne 1 ]; then
    echo "$0: error: argument missing"
    exit 1
fi

outputfile=$1

if [ -z "$SVN_REVISION_OVERRIDE" ]; then
    # probe svn
    #https://stackoverflow.com/questions/58748166/how-do-i-really-get-the-current-revision-in-svn
    #svn_stdout=$(svn info . 2>&1)                      # svn info requires post process-parsing
    svn_stdout=$(svn info --show-item revision 2>&1)
    svn_exit=$?

    if [ $svn_exit -eq  0 ]; then           # exit code is != 0 if executable not found or workspace not tracked
        echo "$0: workspace is versioned by svn"
        #echo "$0: svn_stdout $svn_stdout"
        # a mixed range revision with local modifications may give output like this:
        # 4123:4168MSP
        # first split the second part from the first, then remove the non-numeric part
        #svn_stdout="xxxx Revision: 1234 yyyyy"           # regular svn revision
        #svn_stdout="xxxx Revision: 2345:3456MSP yyyyy"   # a mixed range revision with local modifications may give output like this
        #svn_revision=$(echo $svn_stdout | sed -e 's/.*Revision: //' -e 's/ .*//' -e 's/.*://' -e 's/\([0-9]*\).*/\1/')
        svn_revision=$(echo $svn_stdout | sed -e 's/.*://' -e 's/\([0-9]*\).*/\1/')
        vcs_revision_number=$svn_revision
        vcs_revision_string="svn rev r${svn_revision}"
    else
        # probe git
        git_revision=$(git rev-parse --short HEAD 2>&1)
        git_exit=$?

        if [ $git_exit -eq  0 ]; then           # exit code is != 0 if executable not found or workspace not tracked
            echo "$0: workspace is versioned by git"
            vcs_revision_string="git rev ${git_revision}"
            # calculate the number of commits from most recent one down to the very first - https://git-scm.com/docs/git-rev-list
            # today, svn rev is around 45xxx, git rev (github.com/VICE-Team/svn-mirror.git) is around 34xxx. Add 1,000,000 to distinguish get and svn revs. Must fit into uint32_t
            # WARNING: such an increasing number in git is uncommon and  error prone: will be ambiguous for branches and different remotes!
            #          could alternatively just convert 1st 32 bits of sha1 into number. Then it'll be unabiguous but not ascending
            vcs_revision_number=$(($(git rev-list HEAD  --count) + 1000000))
        else
            echo "$0: no svn/git workspace, using dummy revsion"
            vcs_revision_number=0
            vcs_revision_string=""
        fi
    fi
else        # if [ -z "$SVN_REVISION_OVERRIDE" ]; then
    vcs_revision_number=$SVN_REVISION_OVERRIDE
    vcs_revision_string=$SVN_REVISION_OVERRIDE
fi


# something went wrong, use 0 as the number so compile will work
if test x"$vcs_revision_number" = "x"; then
  vcs_revision_number="0"
fi

echo "$0: using version control revision number $vcs_revision_number string $vcs_revision_string"

# if the output file exists and contains the same vcs_revision_number, then exit
# early and do not produce a new output file
if grep -qs "#define .*_REV_NUMBER $vcs_revision_number" $outputfile; then
    echo $0: $outputfile exists. skipping generation
    exit 0
else
    echo "$0: generating $outputfile"
fi


(
echo "/*"
echo " * $outputfile - SVN revision defines."
echo " *"
echo " * Autogenerated by $(basename $0), DO NOT EDIT !!!"
echo " *"
echo " * Written by"
echo " *  Marco van den Heuvel <blackystardust68@yahoo.com>"
echo " *"
echo " * This file is part of VICE, the Versatile Commodore Emulator."
echo " * See README for copyright notice."
echo " *"
echo " *  This program is free software; you can redistribute it and/or modify"
echo " *  it under the terms of the GNU General Public License as published by"
echo " *  the Free Software Foundation; either version 2 of the License, or"
echo " *  (at your option) any later version."
echo " *"
echo " *  This program is distributed in the hope that it will be useful,"
echo " *  but WITHOUT ANY WARRANTY; without even the implied warranty of"
echo " *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the"
echo " *  GNU General Public License for more details."
echo " *"
echo " *  You should have received a copy of the GNU General Public License"
echo " *  along with this program; if not, write to the Free Software"
echo " *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA"
echo " *  02111-1307  USA."
echo " *"
echo " */"
echo ""
echo "#ifndef VICE_SVNVERSION_H"
echo "#define VICE_SVNVERSION_H"
echo ""
echo "#define VICE_SVN_REV_NUMBER $vcs_revision_number"
echo "#define VICE_SVN_REV_STRING \"$vcs_revision_string\""
echo ""
echo "#endif"
)  > $outputfile
